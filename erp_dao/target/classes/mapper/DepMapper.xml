<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kevin.dao.DepDao">
    <select id="getList" resultType="com.kevin.entity.Dep">
        SELECT * FROM dep
    </select>
    <select id="getByConditionCount" parameterType="com.kevin.entity.Dep" resultType="java.lang.Integer">
        SELECT count(*) FROM dep
        <include refid="dep_where"/>
    </select>
    <select id="getListByDep" parameterType="com.kevin.entity.Dep" resultType="com.kevin.entity.Dep">
        SELECT * FROM dep
        <include refid="dep_where"/>
    </select>

    <sql id="dep_where">
        <where>
            <if test="name!=null and name!= ''">
                and name LIKE '%${name}%'
            </if>
            <if test="tele != null and tele !=''">
                and tele LIKE '%${tele}%'
            </if>
        </where>
    </sql>

    <select id="getDepTotalCount" resultType="java.lang.Integer">
        SELECT count(*) FROM dep
    </select>

    <select id="getDepsByPage" resultType="com.kevin.entity.Dep">
        SELECT * FROM dep LIMIT #{L},#{pageSize}
    </select>

    <insert id="addDep" parameterType="com.kevin.entity.Dep">
      INSERT INTO dep (`name`, `tele`) VALUES (#{name}, #{tele})
    </insert>

    <update id="updateDep" parameterType="com.kevin.entity.Dep">
      UPDATE dep SET `name` = #{name}, `tele` = #{tele} WHERE `uuid` = #{uuid}
    </update>
    <delete id="deleteDep" parameterType="java.lang.String">
    DELETE FROM dep WHERE `uuid` = #{uuid}
</delete>

</mapper>

        <!--


        <mapper namespace="com.ln.mapper.UserMapper">
        <select id="findUserById" parameterType="java.lang.Integer"
                resultType="com.ln.pojo.User">SELECT * FROM `user` WHERE id = #{id}</select>
        <select id="findUserByUserName" parameterType="java.lang.String" resultType="com.ln.pojo.User">
            SELECT * from user WHERE username LIKE #{NAME}
        </select>
        <select id="findUserByName" parameterType="java.lang.String" resultType="com.ln.pojo.User">
            SELECT * from user WHERE username LIKE '%${value}%'
        </select>


        <insert id="insertUser" parameterType="com.ln.pojo.User">
            <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
                SELECT LAST_INSERT_ID()
            </selectKey>
            INSERT INTO `user` (`username`, `birthday`, `sex`, `address`) VALUES (#{username}, #{birthday}, #{sex},
            #{address})
        </insert>

        &lt;!&ndash;设置主键&ndash;&gt;
        <insert id="setUUID" parameterType="com.ln.pojo.Uuid">
            <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
                SELECT UUID_SHORT()
            </selectKey>
            INSERT INTO `uuid` (`id`, `name`) VALUES (#{id}, #{name})
        </insert>

        <delete id="deleteUser" parameterType="java.lang.Integer">
            DELETE FROM `user` WHERE (`id`=#{id})
        </delete>

        <update id="updateUser" parameterType="com.ln.pojo.User">
            UPDATE `user` SET `address`=#{address} WHERE (`id`=#{id})
        </update>

        <select id="findUserByVo" parameterType="com.ln.pojo.QueryVo" resultType="com.ln.pojo.User">
            SELECT * FROM `user` where username LIKE '%${user.username}%' and sex = #{user.sex}
        </select>

        &lt;!&ndash;if&ndash;&gt;
        &lt;!&ndash;<select id="findUserByCondition" parameterType="com.ln.pojo.User" resultType="com.ln.pojo.User">&ndash;&gt;
        &lt;!&ndash;SELECT * FROM USER WHERE 1=1&ndash;&gt;
        &lt;!&ndash;<if test="username!=null and username != ''">&ndash;&gt;
        &lt;!&ndash;and username LIKE '%${username}%'&ndash;&gt;
        &lt;!&ndash;</if>&ndash;&gt;
        &lt;!&ndash;<if test="sex != null">&ndash;&gt;
        &lt;!&ndash;and sex = #{sex}&ndash;&gt;
        &lt;!&ndash;</if>&ndash;&gt;
        &lt;!&ndash;</select>&ndash;&gt;

        &lt;!&ndash;动态包含&ndash;&gt;
        <select id="findUserByCondition" parameterType="com.ln.pojo.User" resultType="com.ln.pojo.User">
            SELECT * FROM USER
            <include refid="user_where"/>
        </select>

        &lt;!&ndash;sql片段&ndash;&gt;
        <sql id="user_where">
            <where>
                <if test="username!=null and username != ''">
                    and username LIKE '%${username}%'
                </if>
                <if test="sex != null">
                    and sex = #{sex}
                </if>
            </where>
        </sql>
        &lt;!&ndash;foreach&ndash;&gt;
        <select id="findUserByIds" parameterType="com.ln.pojo.QueryVo" resultType="com.ln.pojo.User">
            SELECT * FROM USER
            <if test="list != null">
                <where>
                    <foreach collection="list" item="id" open="id in (" close=")" separator=",">
                        #{id}
                    </foreach>
                </where>
            </if>
        </select>


        &lt;!&ndash; 一对一:自动映射 &ndash;&gt;
        <select id="findOrdersAndUser" resultType="com.ln.pojo.CustomOrders">
            select a.*, b.id uid, username, birthday, sex, address
            from orders a, user b
            where a.user_id = b.id
        </select>

        &lt;!&ndash; 一对一:手动映射 &ndash;&gt;
        &lt;!&ndash;
        id:resultMap的唯一标识
        type:将查询出的数据放入这个指定的对象中
        注意:手动映射需要指定数据库中表的字段名与java中pojo类的属性名称的对应关系
         &ndash;&gt;
        <resultMap type="com.ln.pojo.Orders" id="orderAndUserResultMap">
            &lt;!&ndash; id标签指定主键字段对应关系
            column:列,数据库中的字段名称
            property:属性,java中pojo中的属性名称
             &ndash;&gt;
            <id column="id" property="id"/>

            &lt;!&ndash; result:标签指定非主键字段的对应关系 &ndash;&gt;
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>

            &lt;!&ndash; 这个标签指定单个对象的对应关系
            property:指定将数据放入Orders中的user属性中
            javaType:user属性的类型
            &ndash;&gt;
            <association property="user" javaType="com.ln.pojo.User">
                <id column="uid" property="id"/>
                <result column="username" property="username"/>
                <result column="birthday" property="birthday"/>
                <result column="sex" property="sex"/>
                <result column="address" property="address"/>
            </association>
        </resultMap>
        <select id="findOrdersAndUser2" resultMap="orderAndUserResultMap">
            select a.*, b.id uid, username, birthday, sex, address
            from orders a, user b
            where a.user_id = b.id
        </select>

        <resultMap type="com.ln.pojo.User" id="userAndOrdersResultMap">
            <id column="id" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>

            &lt;!&ndash; 指定对应的集合对象关系映射
            property:将数据放入User对象中的ordersList属性中
            ofType:指定ordersList属性的泛型类型
             &ndash;&gt;
            <collection property="ordersList" ofType="com.ln.pojo.Orders">
                <id column="oid" property="id"/>
                <result column="user_id" property="userId"/>
                <result column="number" property="number"/>
                <result column="createtime" property="createtime"/>
            </collection>
        </resultMap>
        <select id="findUserAndOrders" resultMap="userAndOrdersResultMap">
            select a.*, b.id oid ,user_id, number, createtime
            from user a, orders b where a.id = b.user_id
        </select>
        </mapper>-->
